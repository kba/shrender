#!/bin/bash

## Renders a file to markdown using a [shell expression](#render_ext).

## The render method is determined by the file extension, see 
## [RENDER STYLES](#render-styles) for a list of render methods

SHRENDERSHARE="$(dirname "$0")"

# logging
export PATH="$PATH:$SHRENDERSHARE/deps/shlog"
source "$(which shlog)"

# Extension to XY mappings
declare -Agx EXT_TO_RENDER_FUNC=(
    [md]="cat"
    [markdown]="cat"
    [ronn]="cat"
    [txt]="cat"
    [jade]="jade"
    [pug]="jade"
)
typeset -axg SHRENDER_PATH=("$PWD")

source "$SHRENDERSHARE/shrender-jade"
source "$SHRENDERSHARE/shrender-prefix"

set -e

usage () {
    echo "Usage: shrender [opts...] <file-to-render>...

    Options:

        -f --func RENDERFUNC    Use this render func
        "
}

shrender-cat() {
    cat "$1"
}

shrender-load-profile () {
    for profile in "$SHRENDERSHARE/shrender.profile" "/etc/default/shrender" "$PWD/.shrenderrc";do
        if [[ -e "$profile" ]];then source "$profile";fi
    done
    return
}

shrender-resolve-file() {
    local f=$1
    for dir in "${SHRENDER_PATH[@]}";do
        fabs="$dir/$f"
        if [[ -e "$fabs" ]];then
            echo "$fabs"
            return
        fi
    done
    shlog -l error -x 2 "No file found in includes: $renderfile"
}

shrender-function-for-extension() {
    local f="$1"
    local ext=$(basename "$f"|sed 's/.*\.//')
    shlog -l debug "Detecting render function by extension '$ext'"
    local renderfunc="${EXT_TO_RENDER_FUNC[$ext]}"
    if [[ -z "$renderfunc" ]];then
        shlog -l debug "RENDER: Fall back to 'prefix' render function"
        renderfunc='prefix'
    fi
    echo "$renderfunc"
}

shrender() {
    local renderfile renderfunc renderfile_abs
    #man: ## OPTIONS
    while [[ "$1" = -* ]];do
        case "$1" in
            #help:|-f,--func FUNCTION|Render function
            -f|--func*) renderfunc="$2"; shift ;;
            #help:|-p,--path PATH|Add path to shrenders search path
            -p|--path) SHRENDER_PATH+=("$2"); shift ;;
            *) break ;;
        esac
        shift
    done
    [[ -z "$1" ]] && { usage; exit; }
    shrender-load-profile 

    for renderfile in "$@";do
        renderfile_abs=$(shrender-resolve-file "$renderfile")
        if (( $? > 0 ));then
            shlog -l error -x $? "Failed to resolve '$renderfile'"
        fi
        if [[ -z "$renderfunc" ]];then
            renderfunc="$(shrender-function-for-extension "$renderfile")"
        fi
        if ! declare -f "shrender-$renderfunc" >/dev/null;then
            shlog -l error -x 7 "No such render function '$renderfunc'."
        fi
        shlog -l debug "Rendering $renderfile_abs"
        shlog -l info "shrender-$renderfunc '$renderfile_abs'"
        tempfile=$(mktemp --tmpdir "shrender.XXXXX.$(basename "$renderfile"|sed 's/.*\.//')")
        # shellcheck disable=2064
        trap "rm $tempfile" EXIT INT TERM
        awk "{
            gsub(\"__CURLINE__\",NR,\$0);
            gsub(\"__CURFILE__\",\"$renderfile\",\$0);
            print
        }" < "$renderfile_abs" > "$tempfile"
        "shrender-$renderfunc" "$tempfile"
        if (( $? > 0 ));then
            shlog -l error -x 7 "Rendering failed."
        fi
    done
}

if [[ "${BASH_SOURCE[0]}" = "$0" ]];then
    shrender "$@"
else
    export -f shrender
fi
