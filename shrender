#!/bin/bash

## Renders a file to markdown using a [shell expression](#render_ext).

## The render method is determined by the file extension, see 
## [RENDER STYLES](#render-styles) for a list of render methods

SHRENDERSHARE="$(dirname "$0")"

# logging
export PATH="$PATH:$SHRENDERSHARE/deps/shlog/dist"
source "$(which shlog)"

# Extension to XY mappings
declare -Agx EXT_TO_RENDER_FUNC=(
    [md]="cat"
    [markdown]="cat"
    [ronn]="cat"
    [txt]="cat"
    [jade]="jade"
    [pug]="jade"
)
typeset -axg SHRENDER_PATH=("$PWD")

source "$SHRENDERSHARE/shrender-cat"
source "$SHRENDERSHARE/shrender-jade"
source "$SHRENDERSHARE/shrender-prefix"

set -e
export OUTPUT_PREFIX OUTPUT_SUFFIX INPUT_PREFIX INPUT_SUFFIX COLUMNIZE COLUMN_CHAR

#help:
#help:Usage: shrender [opts...] [render-opts] <file-to-render>...
#help:
usage () {
    SHLOG_SILENT=true bash "$0" -ip '#help:' "$0"
}

shrender() {
    local renderfile renderfunc renderfile_abs 
    #help:  
    #help:    Options:
    #help:  
    while [[ "$1" = -* ]];do
        case "$1" in
            #help:\t-f --function \e[33mFUNC[0m\t\tRender function
            -f|--func*) renderfunc="$2"; shift ;;
            #help:\t-p --path \e[33mPATH[0m\t\t\tAdd path to shrenders search path
            -p|--path) SHRENDER_PATH+=("$2"); shift ;;
            #help:\t-c --column \e[33mCHAR[0m\t\tColumnize at this char.
            -c|--column) COLUMNIZE=true; COLUMN_CHAR="$2"; shift ;;
            #help:\t-is --input-suffix \e[33mSUFFIX[0m\tThe pattern to filter input lines with.
            -ip|--input-prefix) INPUT_PREFIX="$2"; shift ;;
            #help:\t-is --input-suffix \e[33mPREFIX[0m\tOptional suffix in input lines to be removed
            -is|--input-suffix) INPUT_SUFFIX="$2"; shift ;;
            #help:\t-op --output-prefix \e[33mPREFIX\e[0m\tPrepend output lines with this string.
            -op|--output-prefix) OUTPUT_PREFIX="$2"; shift ;;
            #help:\t-os --output-suffix \e[33mSUFFIX[0m\tAppend this string to output lines.
            -os|--output-suffix) OUTPUT_SUFFIX+="$2"; shift ;;
            *) shlog -l error -x 87 "No such option '$1'" ;;
        esac
        shift
    done
    [[ -z "$1" ]] && { usage; exit; }
    shrender-load-profile 

    for renderfile in "$@";do
        renderfile_abs=$(shrender-resolve-file "$renderfile")
        if (( $? > 0 ));then
            shlog -l error -x $? "Failed to resolve '$renderfile'"
        fi
        if [[ -z "$renderfunc" ]];then
            renderfunc="$(shrender-function-for-extension "$renderfile")"
        fi
        if ! declare -f "shrender-$renderfunc" >/dev/null;then
            shlog -l error -x 7 "No such render function '$renderfunc'."
        fi
        shlog -l debug "Rendering $renderfile_abs"
        shlog -l info "shrender-$renderfunc '$renderfile_abs'"
        tempfile=$(mktemp --tmpdir "shrender.XXXXX.$(basename "$renderfile"|sed 's/.*\.//')")
        # shellcheck disable=2064
        trap "rm $tempfile" EXIT INT TERM
        awk "{
            gsub(\"__CURLINE__\",NR,\$0);
            gsub(\"__CURFILE__\",\"$renderfile\",\$0);
            print
        }" < "$renderfile_abs" > "$tempfile"
        output=$(
            local IFS=$'\n'
            local line;
            "shrender-$renderfunc" "$tempfile" |while read -r line;do
                printf "%s%s%s\n" "$OUTPUT_PREFIX" "$line" "$OUTPUT_SUFFIX"
            done)
        if [[ ! -z "$COLUMN_CHAR" ]];then
            output=$(echo "$output" |column -ets"$COLUMN_CHAR")
        fi
        if (( $? > 0 ));then
            shlog -l error -x 7 "Rendering failed: $output"
        fi
        echo -e "$output"
    done
}

shrender-load-profile () {
    for profile in "$SHRENDERSHARE/shrender.profile" "/etc/default/shrender" "$PWD/.shrenderrc";do
        if [[ -e "$profile" ]];then source "$profile";fi
    done
    return
}

shrender-resolve-file() {
    local f=$1
    if [[ -e "$f" ]];then
        echo "$f"
        return
    fi
    for dir in "${SHRENDER_PATH[@]}";do
        fabs="$dir/$f"
        if [[ -e "$fabs" ]];then
            echo "$fabs"
            return
        fi
    done
    shlog -l error -x 2 "No file found in includes: $renderfile"
}

shrender-function-for-extension() {
    local f="$1"
    local ext=$(basename "$f"|sed 's/.*\.//')
    shlog -l debug "Detecting render function by extension '$ext'"
    local renderfunc="${EXT_TO_RENDER_FUNC[$ext]}"
    if [[ -z "$renderfunc" ]];then
        shlog -l trace "Default to 'prefix' render function"
        renderfunc='prefix'
    fi
    echo "$renderfunc"
}


if [[ "${BASH_SOURCE[0]}" = "$0" ]];then
    shrender "$@"
else
    export -f shrender
fi
